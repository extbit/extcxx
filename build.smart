project extc++ (./src/abi)

import (
    ./src
)

import -cond($(contains benchmarks,$:goals:)) (
    ./benchmarks
)

import -cond($(contains test,$:goals:)) (
    ./test
)

src := $(CWD)/src

files (
    (\
    algorithm.cpp \
    any.cpp \
    bind.cpp \
    charconv.cpp \
    chrono.cpp \
    condition_variable.cpp \
    debug.cpp \
    exception.cpp \
    functional.cpp \
    future.cpp \
    hash.cpp \
    ios.cpp \
    iostream.cpp \
    locale.cpp \
    memory.cpp \
    mutex.cpp \
    new.cpp \
    optional.cpp \
    random.cpp \
    regex.cpp \
    shared_mutex.cpp \
    stdexcept.cpp \
    string.cpp \
    strstream.cpp \
    support/runtime/exception_fallback.ipp \
    support/runtime/exception_glibcxx.ipp \
    support/runtime/exception_libcxxabi.ipp \
    support/runtime/exception_libcxxrt.ipp \
    support/runtime/exception_msvc.ipp \
    support/runtime/exception_pointer_cxxabi.ipp \
    support/runtime/exception_pointer_glibcxx.ipp \
    support/runtime/exception_pointer_msvc.ipp \
    support/runtime/exception_pointer_unimplemented.ipp \
    support/runtime/new_handler_fallback.ipp \
    support/runtime/stdexcept_default.ipp \
    support/runtime/stdexcept_vcruntime.ipp \
    system_error.cpp \
    thread.cpp \
    typeinfo.cpp \
    utility.cpp \
    valarray.cpp \
    variant.cpp \
    vector.cpp \
    ) ⇒ $(src)
    (\
    apple_availability.h \
    atomic_support.h \
    config_elast.h \
    refstring.h \
    ) ⇒ $(src)/include
)

# TODO:
