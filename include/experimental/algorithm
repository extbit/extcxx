// -*- C++ -*-
//===-------------------------- algorithm ---------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
#pragma once
#pragma GCC system_header
#if false&&0 // experimental algorithm synopsis
namespace std { namespace experimental { inline namespace fundamentals_v1 {

      template <class ForwardIterator, class Searcher>
      ForwardIterator search(ForwardIterator first, ForwardIterator last,
                             const Searcher &searcher);

      // sample removed because it's now part of C++17

    } // namespace fundamentals_v1
  } // namespace experimental
} // namespace std
#endif // experimental algorithm synopsis

#include <experimental/__config>
#include <algorithm>
#include <type_traits>

#include <__debug>

_LIBCPP_BEGIN_NAMESPACE_LFTS

template <class _ForwardIterator, class _Searcher>
_LIBCPP_INLINE_VISIBILITY
_ForwardIterator search(_ForwardIterator __f, _ForwardIterator __l, const _Searcher &__s)
{ return __s(__f, __l).first; }

_LIBCPP_END_NAMESPACE_LFTS
