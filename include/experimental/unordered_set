// -*- C++ -*-
//===------------------------- unordered_set ------------------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
#pragma once
#pragma GCC system_header

#if defined(experimental_unordered_set_synopsis)
// C++1z
namespace std {
namespace experimental {
inline namespace fundamentals_v1 {
namespace pmr {

  template <class T, class Hash = hash<T>, class Pred = equal_to<T>>
  using unordered_set = std::unordered_set<T, Hash, Pred,
                       polymorphic_allocator<T>>;

  template <class T, class Hash = hash<T>, class Pred = equal_to<T>>
  using unordered_multiset = std::unordered_multiset<T, Hash, Pred,
                       polymorphic_allocator<T>>;

} // namespace pmr
} // namespace fundamentals_v1
} // namespace experimental
} // namespace std
#endif // experimental_unordered_set_synopsis

#include <experimental/__config>
#include <unordered_set>
#include <experimental/memory_resource>

_LIBCPP_BEGIN_NAMESPACE_LFTS_PMR

template <class _Value,
          class _Hash = hash<_Value>, class _Pred = equal_to<_Value>>
using unordered_set = _VSTD::unordered_set<_Value, _Hash, _Pred,
                        polymorphic_allocator<_Value>>;

template <class _Value,
          class _Hash = hash<_Value>, class _Pred = equal_to<_Value>>
using unordered_multiset = _VSTD::unordered_multiset<_Value, _Hash, _Pred,
                        polymorphic_allocator<_Value>>;

_LIBCPP_END_NAMESPACE_LFTS_PMR
